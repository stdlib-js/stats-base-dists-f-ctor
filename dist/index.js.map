{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nvar defineProperty = require( '@stdlib/utils-define-property' );\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar isPositive = require( '@stdlib/assert-is-positive-number' ).isPrimitive;\nvar entropy = require( '@stdlib/stats-base-dists-f-entropy' );\nvar kurtosis = require( '@stdlib/stats-base-dists-f-kurtosis' );\nvar mean = require( '@stdlib/stats-base-dists-f-mean' );\nvar mode = require( '@stdlib/stats-base-dists-f-mode' );\nvar skewness = require( '@stdlib/stats-base-dists-f-skewness' );\nvar stdev = require( '@stdlib/stats-base-dists-f-stdev' );\nvar variance = require( '@stdlib/stats-base-dists-f-variance' );\nvar cdf = require( '@stdlib/stats-base-dists-f-cdf' );\nvar pdf = require( '@stdlib/stats-base-dists-f-pdf' );\nvar quantile = require( '@stdlib/stats-base-dists-f-quantile' );\nvar format = require( '@stdlib/string-format' );\n\n\n// FUNCTIONS //\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n*/\nfunction fCDF( x ) {\n\treturn cdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @private\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n*/\nfunction fPDF( x ) {\n\treturn pdf( x, this.d1, this.d2 );\n}\n\n/**\n* Evaluates the quantile function.\n*\n* @private\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n*/\nfunction fQuantile( p ) {\n\treturn quantile( p, this.d1, this.d2 );\n}\n\n\n// MAIN //\n\n/**\n* F distribution constructor.\n*\n* @constructor\n* @param {PositiveNumber} [d1=1.0] - numerator degrees of freedom\n* @param {PositiveNumber} [d2=1.0] - denominator degrees of freedom\n* @throws {TypeError} `d1` must be a positive number\n* @throws {TypeError} `d2` must be a positive number\n* @returns {F} distribution instance\n*\n* @example\n* var f = new F( 1.0, 1.0 );\n*\n* var y = f.cdf( 0.8 );\n* // returns ~0.465\n*\n* var v = f.mode;\n* // returns NaN\n*/\nfunction F() {\n\tvar d1;\n\tvar d2;\n\tif ( !(this instanceof F) ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn new F();\n\t\t}\n\t\treturn new F( arguments[ 0 ], arguments[ 1 ] );\n\t}\n\tif ( arguments.length ) {\n\t\td1 = arguments[ 0 ];\n\t\td2 = arguments[ 1 ];\n\t\tif ( !isPositive( d1 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Numerator degrees of freedom must be a positive number. Value: `%s`.', d1 ) );\n\t\t}\n\t\tif ( !isPositive( d2 ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Denominator degrees of freedom must be a positive number. Value: `%s`.', d2 ) );\n\t\t}\n\t} else {\n\t\td1 = 1.0;\n\t\td2 = 1.0;\n\t}\n\tdefineProperty( this, 'd1', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d1;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\td1 = value;\n\t\t}\n\t});\n\tdefineProperty( this, 'd2', {\n\t\t'configurable': false,\n\t\t'enumerable': true,\n\t\t'get': function get() {\n\t\t\treturn d2;\n\t\t},\n\t\t'set': function set( value ) {\n\t\t\tif ( !isPositive( value ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid assignment. Must be a positive number. Value: `%s`.', value ) );\n\t\t\t}\n\t\t\td2 = value;\n\t\t}\n\t});\n\treturn this;\n}\n\n/**\n* F distribution differential entropy.\n*\n* @name entropy\n* @memberof F.prototype\n* @type {number}\n* @see [differential entropy]{@link https://en.wikipedia.org/wiki/Entropy_%28information_theory%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.entropy;\n* // returns ~1.12\n*/\nsetReadOnlyAccessor( F.prototype, 'entropy', function get() {\n\treturn entropy( this.d1, this.d2 );\n});\n\n/**\n* F distribution excess kurtosis.\n*\n* @name kurtosis\n* @memberof F.prototype\n* @type {number}\n* @see [kurtosis]{@link https://en.wikipedia.org/wiki/Kurtosis}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.kurtosis;\n* // returns ~26.143\n*/\nsetReadOnlyAccessor( F.prototype, 'kurtosis', function get() {\n\treturn kurtosis( this.d1, this.d2 );\n});\n\n/**\n* F distribution expected value.\n*\n* @name mean\n* @memberof F.prototype\n* @type {number}\n* @see [expected value]{@link https://en.wikipedia.org/wiki/Expected_value}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mean;\n* // returns 1.2\n*/\nsetReadOnlyAccessor( F.prototype, 'mean', function get() {\n\treturn mean( this.d1, this.d2 );\n});\n\n/**\n* F distribution mode.\n*\n* @name mode\n* @memberof F.prototype\n* @type {number}\n* @see [mode]{@link https://en.wikipedia.org/wiki/Mode_%28statistics%29}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.mode;\n* // returns ~0.429\n*/\nsetReadOnlyAccessor( F.prototype, 'mode', function get() {\n\treturn mode( this.d1, this.d2 );\n});\n\n/**\n* F distribution skewness.\n*\n* @name skewness\n* @memberof F.prototype\n* @type {number}\n* @see [skewness]{@link https://en.wikipedia.org/wiki/Skewness}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.skewness;\n* // returns ~3.207\n*/\nsetReadOnlyAccessor( F.prototype, 'skewness', function get() {\n\treturn skewness( this.d1, this.d2 );\n});\n\n/**\n* F distribution standard deviation.\n*\n* @name stdev\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [standard deviation]{@link https://en.wikipedia.org/wiki/Standard_deviation}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.stdev;\n* // returns ~1.122\n*/\nsetReadOnlyAccessor( F.prototype, 'stdev', function get() {\n\treturn stdev( this.d1, this.d2 );\n});\n\n/**\n* F distribution variance.\n*\n* @name variance\n* @memberof F.prototype\n* @type {PositiveNumber}\n* @see [variance]{@link https://en.wikipedia.org/wiki/Variance}\n*\n* @example\n* var f = new F( 4.0, 12.0 );\n*\n* var v = f.variance;\n* // returns 1.26\n*/\nsetReadOnlyAccessor( F.prototype, 'variance', function get() {\n\treturn variance( this.d1, this.d2 );\n});\n\n/**\n* Evaluates the cumulative distribution function (CDF).\n*\n* @name cdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated CDF\n* @see [cdf]{@link https://en.wikipedia.org/wiki/Cumulative_distribution_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.cdf( 0.5 );\n* // returns ~0.36\n*/\nsetReadOnly( F.prototype, 'cdf', fCDF );\n\n/**\n* Evaluates the probability density function (PDF).\n*\n* @name pdf\n* @memberof F.prototype\n* @type {Function}\n* @param {number} x - input value\n* @returns {number} evaluated PDF\n* @see [pdf]{@link https://en.wikipedia.org/wiki/Probability_density_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.pdf( 2.0 );\n* // returns ~0.125\n*/\nsetReadOnly( F.prototype, 'pdf', fPDF );\n\n/**\n* Evaluates the quantile function.\n*\n* @name quantile\n* @memberof F.prototype\n* @type {Function}\n* @param {Probability} p - input probability\n* @returns {number} evaluated quantile function\n* @see [quantile function]{@link https://en.wikipedia.org/wiki/Quantile_function}\n*\n* @example\n* var f = new F( 2.0, 4.0 );\n*\n* var v = f.quantile( 0.5 );\n* // returns ~0.828\n*/\nsetReadOnly( F.prototype, 'quantile', fQuantile );\n\n\n// EXPORTS //\n\nmodule.exports = F;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* F distribution constructor.\n*\n* @module @stdlib/stats-base-dists-f-ctor\n*\n* @example\n* var F = require( '@stdlib/stats-base-dists-f-ctor' );\n*\n* var f = new F( 1.0, 1.0 );\n*\n* var y = f.cdf( 0.8 );\n* // returns ~0.465\n*\n* var mode = f.mode;\n* // returns NaN\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_main", "__commonJSMin", "exports", "module", "defineProperty", "setReadOnly", "setReadOnlyAccessor", "isPositive", "entropy", "kurtosis", "mean", "mode", "skewness", "stdev", "variance", "cdf", "pdf", "quantile", "format", "fCDF", "x", "fPDF", "fQuantile", "p", "F", "d1", "d2", "value", "main"]
}
